<!--#include virtual="header.txt"-->

<h1><a name="top">概览</a></h1>

<p>Slurm是一个可工作于各种不同规模的Linux集群之上的开源、具备容错性和高度可扩展性的集群管理和作业调度系统。Slurm的操作不需要内核上的修改且相对独立。作为一款集群作业管理系统，Slurm包含三大主要功能。首先，它能在特定时间段内为用户分配对资源（计算节点）的独占和/或非独占访问权限，以便他们可以执行作业。其次，它提供了在分配的节点上启动、执行和监控作业（通常是并行作业）的框架。
最后，它通过管理待处理作业的队列来仲裁资源的争用。
除此之外还提供了可选的插件用于账户管理、高级预约、组调度、回填调度、拓扑优化的资源选择、基于用户或账户的资源限制以及复杂的多因素作业优先级算法等功能：
<a href="accounting.html">账户管理</a>,
<a href="reservations.html">高级预约</a>,
<a href="gang_scheduling.html">抢占调度</a> (并行作业分时), 回填调度,
<a href="topology.html">拓扑优化的资源选择</a>,
<a href="resource_limits.html">资源限制</a> (基于用户或账户的资源限制), <a href="priority_multifactor.html"> 复杂的多因素作业优先级算法</a> 

<h2>架构</h2>
<p>Slurm有至少一个集中管理器<b>slurmctld</b>slurmctld用于监控资源和作业，也可能存在备用的<b>slurmctld</b>用于系统故障后的责任接管。每个计算节点上都有一个名为<b>slurmd</b>的守护进程，类似于一个远程shell，它不断地等待作业分配、执行作业、返回作业状态，<b>slurmd</b>提供了容错的分层通信。可选的<b>slurmdbd</b>(Slurm DataBase Daemon) 用于在单个数据库中记录多个Slurm管理的账务信息。  
还包含一些命令行工具，用户工具包括 <b>srun</b> 用于创建作业，
<b>scancel</b> 用于终止排队等候或正在运行的作业，
<b>sinfo</b> 用于报告系统状态，
<b>squeue</b> 用于报告作业状态，
<b>sacct</b> 用于获取正在运行或已经完成的作业或作业步信息。
<b>smap</b> 和 <b>sview</b> 以图形方式报告系统和作业状态， 包括网络拓扑。
管理员工具 <b>scontrol</b> 用于监视和/或修改集群上的配置和状态信息。<b>sacctmgr</b>数据库管理工具用于识别群集，有效用户，有效的帐户等信息。
所有这些功能均有对应的API</p>

<div class="figure">
  <img src="arch.gif" width="550"><br>
  Figure 1. Slurm components
</div>

<p>Slurm包含了调度所需的各种功能，除基本功能之外Slurm还提供了可用于轻松支持各种基础设施的通用插件机制，这允许模块化的方式配置Slurm，下面是目前支持的插件以及它们的功能：  
<ul>
<li><a href="accounting_storageplugins.html">Accounting Storage</a>:
  主要用于存储有关作业的历史数据。当与`slurmdbd`一起使用时，它还可以提供基于限制的系统以及历史系统状态。
</li>

<li><a href="acct_gather_energy_plugins.html">Account Gather Energy</a>:
  收集系统中每个作业或节点的能耗数据，此插件集成于<a href="accounting_storageplugins.html">Accounting Storage</a> 和<a href="jobacct_gatherplugins.html"> Job Account Gather</a>插件中。
</li>

<li><a href="authplugins.html">Authentication of communications</a>:
  提供Slurm各种组件之间的认证机制。
</li>

<li><a href="checkpoint_plugins.html">Checkpoint</a>:
  实现检查点机制。
</li>

<li><a href="crypto_plugins.html">Cryptography (Digital Signature
  Generation)</a>:
  用于生成数字签名的机制，验证作业步被授权在特定节点上执行。这与用于验证的<a href="authplugins.html">Authentication</a>插件不同，因为作业步请求是从用户的srun命令而不是直接从slurmctld守护进程发出的，该插件用于生成作业步凭证及其数字签名。
</li>

<li><a href="gres.html">Generic Resources</a>: 提供用于控制如GPU、MIC等通用资源的接口。
</li>

<li><a href="job_submit_plugins.html">Job Submit</a>:
  自定义作业提交插件用于控制作业提交和更新的参数。
</li>

<li><a href="jobacct_gatherplugins.html">Job Accounting Gather</a>:
  收集作业步资源使用情况。
</li>

<li><a href="jobcompplugins.html">Job Completion Logging</a>:
  负责作业终止记录，所收集的数据通常是<a href="accounting_storageplugins.html">Accounting Storage Plugin</a>的子集。
</li>

<li><a href="launch_plugins.html">Launchers</a>:
  控制<a href="srun.html">'srun'</a>命令用于启动任务的机制。
</li>

<li><a href="mpiplugins.html">MPI</a>:
  为各种MPI实现提供不同的钩子。例如用于设置MPI特定的环境变量。
</li>

<li><a href="preempt.html">Preempt</a>:
  设定作业抢占机制。
</li>

<li><a href="priority_plugins.html">Priority</a>:
  为作业指定优先级。
</li>

<li><a href="proctrack_plugins.html">Process tracking (for signaling)</a>:
  提供作业进度追踪，用于信号捕获及作业信息统计。
</li>

<li><a href="schedplugins.html">Scheduler</a>:
  决定作业如何调度。
</li>

<li><a href="selectplugins.html">Node selection</a>:
  决定资源如何分配。
</li>

<li><a href="switchplugins.html">Switch or interconnect</a>:
  交换机或互连接口插件。对于大多数系统（以太网或infiniband），这不是必需的。
</li>

<li><a href="taskplugins.html">Task Affinity</a>:
  提供绑定作业的机制，并将其各个任务分配给特定的处理器。
</li>

<li><a href="topology_plugin.html">Network Topology</a>:
  根据网络拓扑优化资源选择。用于工作分配和高级预约。  
</li>

</ul>

<p>下图中展示了由Slurm守护进程所管理的实体，包括：<b>节点</b>,
  即Slurm中的计算资源。 <b>分区（partition）</b>, 分区将一组节点组合成逻辑上的一个集合。<b>作业</b>, 特定时间为用户进行的一次资源申请或分配即可看作一个作业。<b>作业步（job steps）</b>, 一个作业中的一系列任务（可能是并行的）。
分区可以被认为是作业队列，每个队列都有各种约束，如作业大小限制，作业时间限制，允许使用它的用户等。
按优先级排序的作业被分配到分区内的节点上，直到该分区中的资源（节点，处理器，内存等）耗尽为止。一旦作业分配了一组节点，用户就可在这些节点上以任何配置的作业步的形式启动并行作业。既可以单个作业步使用所有的节点，也可以多个作业步只使用部分已分配的资源。Slurm负责资源的管理，你可以同时提交任意多个作业，多个作业将进行排队，当系统中有可用资源时Slurm将会为这些作业分配资源。</p>

<div class="figure">
  <img src="entities.gif" width="550"><br>
  图2. Slurm实体
</div>

<p class="footer"><a href="#top">回到顶部</a></p>

<h2>Configurability</h2>
<p>节点状态监控包括：处理器数量，内存容量，临时磁盘空间以及状态（UP，DOWN等等）。除此之外还包括weight（被分配作业的优先权）和features（节点的任意其他信息，例如处理器类型和速度等）。节点被归类到多个队列中，节点允许重复出现在多个队列中，队列信息包括：名称，与之相关联的节点列表，状态，最大作业量，单个作业最大节点数量，访问组，优先级（对于单个节点出现在多个队列中的情况下该选项很重要）以及节点共享策略。调度系统将根据以上这些配置执行少量比较和一系列快速操作来做出调度决策。示例（部分Slurm配置文件如下。</p>
<pre>
#
# Sample /etc/slurm.conf
#
ControlMachine=linux0001
BackupController=linux0002
#
AuthType=auth/munge
Epilog=/usr/local/slurm/sbin/epilog
PluginDir=/usr/local/slurm/lib
Prolog=/usr/local/slurm/sbin/prolog
SlurmctldPort=7002
SlurmctldTimeout=120
SlurmdPort=7003
SlurmdSpoolDir=/var/tmp/slurmd.spool
SlurmdTimeout=120
StateSaveLocation=/usr/local/slurm/slurm.state
TmpFS=/tmp
#
# Node Configurations
#
NodeName=DEFAULT CPUs=4 TmpDisk=16384 State=IDLE
NodeName=lx[0001-0002] State=DRAINED
NodeName=lx[0003-8000] RealMemory=2048 Weight=2
NodeName=lx[8001-9999] RealMemory=4096 Weight=6 Feature=video
#
# Partition Configurations
#
PartitionName=DEFAULT MaxTime=30 MaxNodes=2
PartitionName=login Nodes=lx[0001-0002] State=DOWN
PartitionName=debug Nodes=lx[0003-0030] State=UP Default=YES
PartitionName=class Nodes=lx[0031-0040] AllowGroups=students
PartitionName=DEFAULT MaxTime=UNLIMITED MaxNodes=4096
PartitionName=batch Nodes=lx[0041-9999]
</pre>

<p style="text-align:center;">最后修订2013年3月6日</p>

<!--#include virtual="footer.txt"-->
